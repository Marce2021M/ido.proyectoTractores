---
title: "Clase Modelado 1"
lang: es
date: today
format:
  pdf:
    latex_engine: xelatex
nocite: |
  @*
---

```{julia}

using JuMP, HiGHS;
model = Model(HiGHS.Optimizer);

# Tener en cuenta que x_1 es en realidad x_0
#  En este problema se considera la primera vez que se compró un tractor.
T = 6; #20 posiciones en la línea temporal de 19 años

R = 4 ;#6 posiciones en la línea temporal de 5 años máximos de depreciación

# Matriz de valor de mercado de tractor

matrixPB = [0 40000 54000 98000; 0 43000 62000 87000; 0 48000 71000 0; 0 49000 0 0; 0 0 0 0; 0 0 0 0];

@variable(model, x[1:T], Bin);

@variable(model, y[1:T,1:R], Bin);

@constraint(model, x[T] == 1); # Se deBe vender el tractor el año 19, ya que el Señor Marquez se retira.
@constraint(model, x[1] == 1);

 # Asegurando que en 5 años debo haber vendido 
 #al menos un tractor para todo 14 >= t >= 0
for t in 1:(T-5)
    @constraint(model, x[t] + x[t+1] + x[t+2] + x[t+3] + x[t+4] >= 1);
end

# Para asegurar que no compres tractor dos años consecutivos para todo 17 >= t >= 0
for t in 1:(T-2)
    @constraint(model, x[t] + x[t+1] <= 1) ;
end

# Suma de Yij debe ser igual a Xi
for i in 1:(T-1)
    @constraint(model, sum(y[i,j] for j in 1:R) == x[i]) ;
end

# Asumiendo que T y R definen los límites de tus índices
for z in 3:(T+R)
    @constraint(model, sum(y[i, j] for i in 1:T, j in 1:R if i + j == z) == 
    (z-1 <= T ? x[z-1] : 0));
end

# Restricción para no vender en el mismo momento de compra
for i in 1:T
    @constraint(model, y[i,1] == 0);
end

@constraint(model, sum(y[T,j] for j in 1:R) == 0) # El final no se contabiliza;


@objective(model, Max, sum(matrixPB[i,j]*y[i,j] for i in 1:T, j in 1:R));



```


```{julia}
optimization_result = optimize!(model);

value.(x)
```

# Probar con matriz de incidencia y adyacencia vistos en clase