---
title: "Clase Modelado 1"
lang: es
date: today
format:
  pdf:
    latex_engine: xelatex
nocite: |
  @*
---

# Modelado 1

## 1.- Formulación

Diseñe un modelo de programación lineal (mixto-entero) para resolver este problema.
Explique claramente el significado de las variables, restricciones y constantes utilizadas en el modelo.


```{julia}
using JuMP, HiGHS;
model = Model(HiGHS.Optimizer);

# Tener en cuenta que x_1 es en realidad x_0
#  En este problema se considera la primera vez que se compró un tractor.
T = 20; #20 posiciones en la línea temporal de 19 años

R = 6 ;#6 posiciones en la línea temporal de 5 años máximos de depreciación

# Matriz de valor de mercado de tractor

inflacion = .05; # 5% de inflación anual

aumentoCosto = .15 ;# 15% de aumento anual en costo de mantenimiento

depreciacionInicial = .1; # 10% de depreciación anual

depreciacionCorriente = .07; # 7% de depreciación anual

pmTractorInicial = 43000/(1+inflacion)^2 ;# Precio inicial de tractor

costoInicial = 1300/(1+aumentoCosto)^2; # Costo inicial de mantenimiento

# Creamos matriz de precio de mercado de tractor
matrixPM = ones(1, T) * pmTractorInicial;

for i in 2:T
    matrixPM[i] = matrixPM[i-1] * (1+inflacion);
end
# Creamos matriz de valor en libros de tractor
matrixPB = ones(T, R);

for i in 1:T
    matrixPB[i, 1] = matrixPM[1, i]*(1-depreciacionInicial);
end

for i in 1:T
    for j in 2:R
        matrixPB[i, j] = matrixPB[i, j-1]*(1-depreciacionCorriente);
    end
end

# Creamos matriz de mantenimiento de tractor

matrixC = ones(T, R);

for i in 1:T
    matrixC[i, 1] = costoInicial*(1+aumentoCosto)^(i-1);
end

for i in 1:T
    for j in 2:R
        matrixC[i, j] = matrixC[i, j-1]*(1+aumentoCosto);
    end
end

@variable(model, x[1:T], Bin);

@variable(model, y[1:T,1:R], Bin);

@constraint(model, x[T] == 1); # Se deBe vender el tractor el año 19, ya que el Señor Marquez se retira.
@constraint(model, x[1] == 1);

 # Asegurando que en 5 años debo haber vendido 
 #al menos un tractor para todo 14 >= t >= 0
for t in 1:(T-5)
    @constraint(model, x[t] + x[t+1] + x[t+2] + x[t+3] + x[t+4] >= 1);
end

# Para asegurar que no compres tractor dos años consecutivos para todo 17 >= t >= 0
for t in 1:(T-2)
    @constraint(model, x[t] + x[t+1] <= 1) ;
end

# Suma de Yij debe ser igual a Xi
for i in 1:(T-1)
    @constraint(model, sum(y[i,j] for j in 1:R) == x[i]) ;
end

# Asumiendo que T y R definen los límites de tus índices
for z in 3:(T+R)
    @constraint(model, sum(y[i, j] for i in 1:T, j in 1:R if i + j == z) == 
    (z-1 <= T ? x[z-1] : 0));
end

# Restricción para no vender en el mismo momento de compra
for i in 1:T
    @constraint(model, y[i,1] == 0);
end

@constraint(model, sum(y[T,j] for j in 1:R) == 0) # El final no se contabiliza;


@objective(model, Max, sum(matrixPB[i,j]*y[i,j] for i in 1:T, j in 1:R) - 
sum(matrixPM[i]*x[i] for i in 1:(T-1)) );


```

```{julia, results='hide', message=false, warning=false}
optimization_result = optimize!(model);

value.(x)
```

# 2.- Resolución

Resuelva el problema de programación lineal anterior y muestre en diferentes tablas que le ensenarán al Sr. Márquez cómo varían los costes y precios de venta, del tractor en cada año, así como los costes de mantenimiento. Explique dichas tablas e indique cómo se calcularía el coste total de mantenimiento del tractor a lo largo de los 17 años

```{julia}
using DataFrames

# Crear un DataFrame para mostrar los resultados
df1 = DataFrame(matrixPM, :auto)
df1_transposed = DataFrame(transpose(Matrix(df1)), :auto)

df2 = DataFrame(matrixPB,:auto)

df3 = DataFrame(matrixC,:auto)

df1_transposed
```

```{julia}
df2
```

```{julia}
df3
```

# 3.- Aumentando costos

```{julia}
# Creamos matriz estática nueva de mantenimiento de tractor
aumentoCosto2 = .03 ;# 3% de aumento anual en costo de mantenimiento
matrixCEst = ones(T, R);

for i in 1:T
    matrixCEst[i, 1] = .01*matrixPM[1,i]*(1+aumentoCosto)^(i-1);
end

for i in 1:T
    for j in 2:3
        matrixCEst[i, j] = matrixCEst[i, j-1]*(1+aumentoCosto);
    end
end

for i in 1:T
    for j in 4:R
        matrixCEst[i, j] = matrixCEst[i, j-1]*(1+aumentoCosto)*(1+aumentoCosto2);
    end
end

matrixC = cumsum(matrixCEst, dims=2);

@objective(model, Max, sum(matrixPB[i,j]*y[i,j] for i in 1:T, j in 1:R) - 
sum(matrixPM[i]*x[i] for i in 1:(T-1)) - 
sum(matrixC[i,j]*y[i,j] for i in 1:T, j in 1:R) );

```

```{julia}
optimization_result = optimize!(model);

value.(x)

```

```{julia}
value.(y)
```

# 4.- Resolución

Muestre c ́omo el cambio anterior en el coste del tractor afectar ́ıa en el modelo de
programaci ́on lineal.

**No cambia nada**

# 5.- Conclusiones
Mart ́ın tiene pensado continuar con el trabajo en la granja una vez que su padre se
retire. El quiere aprovechar el trabajo de su hermana y evitarse problemas con el
tractor una vez que su padre se jubile. As ́ı le pide a su hermana que investigue si
cambiar ́an las pol ́ıticas de reemplazo cuando el cambio del tractor se realice de forma
peri ́odica en el tiempo. Para de esta manera poder seguir esa pol ́ıtica peri ́odica siempre
y cuando los precios se ajusten a esos valores sin importar cu ́antos a ̃nos est ́e al frente
de la granja


```{julia}
using JuMP, HiGHS;
model = Model(HiGHS.Optimizer);

# Tener en cuenta que x_1 es en realidad x_0
#  En este problema se considera la primera vez que se compró un tractor.
T = 100; #20 posiciones en la línea temporal de 19 años

R = 6 ;#6 posiciones en la línea temporal de 5 años máximos de depreciación

# Matriz de valor de mercado de tractor

inflacion = .05; # 5% de inflación anual

aumentoCosto = .15 ;# 15% de aumento anual en costo de mantenimiento

depreciacionInicial = .1; # 10% de depreciación anual

depreciacionCorriente = .07; # 7% de depreciación anual

pmTractorInicial = 43000/(1+inflacion)^2 ;# Precio inicial de tractor

costoInicial = 1300/(1+aumentoCosto)^2; # Costo inicial de mantenimiento

# Creamos función de precio de mercado de tractor
function precioMercado(i)
    return pmTractorInicial*(1+inflacion)^(i-1);
end
# Creamos función de valor en libros de tractor

function precioLibros(i, j)
    if j == 1
        return precioMercado(i)*(1-depreciacionInicial);
    else
        return precioLibros(i, j-1)*(1-depreciacionCorriente);
    end
end

@variable(model, x[1:T], Bin);

@variable(model, y[1:T,1:R], Bin);

@constraint(model, x[T] == 1); # Se deBe vender el tractor el año 19, ya que el Señor Marquez se retira.
@constraint(model, x[1] == 1);

 # Asegurando que en 5 años debo haber vendido 
 #al menos un tractor para todo 14 >= t >= 0
for t in 1:(T-5)
    @constraint(model, x[t] + x[t+1] + x[t+2] + x[t+3] + x[t+4] >= 1);
end

# Para asegurar que no compres tractor dos años consecutivos para todo 17 >= t >= 0
for t in 1:(T-2)
    @constraint(model, x[t] + x[t+1] <= 1) ;
end

# Suma de Yij debe ser igual a Xi
for i in 1:(T-1)
    @constraint(model, sum(y[i,j] for j in 1:R) == x[i]) ;
end

# Asumiendo que T y R definen los límites de tus índices
for z in 3:(T+R)
    @constraint(model, sum(y[i, j] for i in 1:T, j in 1:R if i + j == z) == 
    (z-1 <= T ? x[z-1] : 0));
end

# Restricción para no vender en el mismo momento de compra
for i in 1:T
    @constraint(model, y[i,1] == 0);
end

@constraint(model, sum(y[T,j] for j in 1:R) == 0) # El final no se contabiliza;


# Creamos matriz estática nueva de mantenimiento de tractor
aumentoCosto2 = .03 ;# 3% de aumento anual en costo de mantenimiento


function costosMantenimiento1(i, j)
    if j == 1
        return costoInicial*(1+aumentoCosto)^(i-1);
    else
        return costosMantenimiento1(i, j-1)*(1+aumentoCosto);
    end
end

function costosMantenimiento2(i, j)
    if j == 1
        return .01*precioMercado(i)*(1+aumentoCosto)^(i-1);
    elseif j == 2 || j == 3
        return costosMantenimiento2(i, j-1)*(1+aumentoCosto);
    else
        return costosMantenimiento2(i, j-1)*(1+aumentoCosto)*(1+aumentoCosto2);
    end
end

function acumCostosMantenimiento1(i, j)
    if j == 1
        return 0;
    else
        return sum(costosMantenimiento1(i, k) for k in 2:j);
    end
end

function acumCostosMantenimiento2(i, j)
    if j == 1
        return 0;
    else
        return sum(costosMantenimiento2(i, k) for k in 2:j);
    end
end


@objective(model, Max, sum(precioLibros(i,j)*y[i,j] for i in 1:T, j in 1:R) - 
sum(precioMercado(i)*x[i] for i in 1:(T-1)) - 
sum(acumCostosMantenimiento2(i,j)*y[i,j] for i in 1:T, j in 1:R) );

resultado = optimize!(model)

value.(x)


```

```{julia}
value.(y)

```

```{julia}
using Plots
gr()

# Generamos los datos para la tabla y la gráfica
años = 0:19
precios = [precioMercado(i+1) for i in años]

# Creando la tabla
println("Año | Precio de Mercado")
println("---------------------")
for i in años
    println("$i | $(precioMercado(i+1))")
end

# Creando la gráfica
p = plot(años, precios, title="Precio de Mercado del Tractor", xlabel="Año", ylabel="Precio", legend=false)

# Guardando la gráfica en un archivo JPG
savefig(p, "PM_tractor.png")



```

```{julia}

# Crear la tabla
println("i\\j", " ", join(0:5, "  "))
for i in 0:19
    precios = [precioLibros(i+1, j) for j in 1:6]
    println("$i  ", join(precios, "  "))
end

```

```{julia}
# Crear la tabla
println("i\\j", " ", join(0:5, "  "))
for i in 0:19
    precios = [acumCostosMantenimiento2(i+1, j) for j in 1:6]
    println("$i  ", join(precios, "  "))
end
```

# 6.- Haciendo varias pruebas del PPL para varias instancias


```{julia}
using JuMP, HiGHS
M = 6
N = 7
L = 100

matrixCostos = [
    10 30 30 40 50 60 80;
    50 25 40 30 60 30 5;
    70 50 15 60 40 50 60;
    30 50	40	30	10	70	45;
    60 30	40	10	50	70	35;
    30 40	50	30	40	50	10;
]

poblacion = [75, 50, 100, 150, 120, 80]

model = Model(HiGHS.Optimizer)

@variable(model, x[1:M, 1:N] >= 0, Bin)
@variable(model, y[1:N] >= 0, Bin)

@constraint(model, [i=1:M], sum(x[i,j] for j=1:N) == 1)
@constraint(model, [j=1:N], sum(x[i,j]*poblacion[i] for i=1:M) >= L*y[j])
@constraint(model, [j=1:N], sum(x[i,j]*poblacion[i] for i=1:M) <= sum(poblacion)*y[j])

@objective(model, Min, sum(matrixCostos[i,j]*x[i,j] for i=1:M, j=1:N))

optimize!(model)

```


```{julia}
solution_summary(model; verbose = true)
```

```{julia}
value.(x)
```

```{julia}
value.(y)

```

```{julia}
using DelimitedFiles

data1 = readdlm("p1.txt", ' ', Float64)


data2 = readdlm("p2.txt", ' ', Float64)

data3 = readdlm("p3.txt", ' ', Float64)

data4 = readdlm("p4.txt", ' ', Float64)

data5 = readdlm("p5.txt", ' ', Float64)
coordinates = data5[:,2:3]
```

```{julia}
using JuMP, HiGHS, LinearAlgebra
function solve_tsp(coordinates)
    # Calculate the distance matrix
    n = size(coordinates, 1)
    dist = [norm(coordinates[i, :] - coordinates[j, :]) for i in 1:n, j in 1:n]

    # Create a model
    model = Model(HiGHS.Optimizer)

    # Define variables
    @variable(model, x[1:n, 1:n], Bin)
    @variable(model, u[1:n], Int)

    # Define objective
    @objective(model, Min, sum(dist[i, j] * (x[i, j]+x[j, i]) for i in 1:n for j in i+1:n))

    # Add constraints
    for i in 1:n
        @constraint(model, sum(x[i, j] for j in 1:n) == 1)
        @constraint(model, sum(x[j, i] for j in 1:n) == 1)
    end

    for i in 2:n
        for j in 2:n
            if i != j
                @constraint(model, u[i]-u[j]+(n-1)*x[i,j] <= n-2)
            end
        end
    end

    for i in 1:n
    @constraint(model, x[i,i] == 0)
    end


    # Solve the problem
    start_time = time()
    optimize!(model)
    end_time = time()

    # Get the solution
    solution = value.(x)

    # Calculate the total distance
    total_distance =sum(dist[i, j] * solution[i, j] for i in 1:n for j in 1:n)

    return total_distance, end_time - start_time, solution
end
```

```{julia}
# Primero
distTot1, timeTotal1, sol1 =  solve_tsp(data1[:,2:3])
```



```{julia}
# Segundo
distTot2, timeTotal2, sol2 =  solve_tsp(data2[:,2:3])

```



```{julia}
distTot3, timeTotal3, sol3 =  solve_tsp(data3[:,2:3])
```

```{julia}
distTot4, timeTotal4, sol4 =  solve_tsp(data4[:,2:3])
```

```{julia}
distTot5, timeTotal5, sol5 =  solve_tsp(data5[:,2:3])
```

```{julia}
using Plots

function plot_solution(coordinates, solution)
    # Extract the x and y coordinates
    x_coords = coordinates[:, 1]
    y_coords = coordinates[:, 2]

    # Initialize tour with the starting point
    n = size(coordinates, 1)
    tour = [1]
    current = 1

    # Construct the tour from the solution
    for i in 2:n
        for j in 1:n
            if solution[current, j] > 0.5  # Assuming a threshold to determine the path
                push!(tour, j)
                current = j  # Update current location
                break
            end
        end
    end
    push!(tour, 1)  # Return to the starting point

    # Create a plot of the tour
    p = plot(x_coords[tour], y_coords[tour], marker = :circle, line = (:blue, 1), legend = false)
    scatter!(p, x_coords, y_coords, color = :red)  # Optionally add the points as well
    return p
end

# Assuming data5 and sol5 are defined appropriately
# plot_solution(data5[:, 2:3], sol5)


# Plot the solution for the first data set
p = plot_solution(data4[:,2:3], sol4)
savefig(p, "tsp_solution1.png")


```


